"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

import dotenv
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


DJANGO_ENVIRONMENT = os.environ.get("DJANGO_ENVIRONMENT", "dev")
# dotenv_file = os.path.join(BASE_DIR, "docker/.env")

if DJANGO_ENVIRONMENT == "dev":
    dotenv_file = os.path.join(BASE_DIR, "docker/.env.dev")

if DJANGO_ENVIRONMENT == "local":
    dotenv_file = os.path.join(BASE_DIR, "docker/.env.local")

elif DJANGO_ENVIRONMENT == "test":
    dotenv_file = os.path.join(BASE_DIR, "docker/.env.test")


elif DJANGO_ENVIRONMENT == "prod":
    dotenv_file = os.path.join(BASE_DIR, "docker/.env")

else:
    dotenv_file = os.path.join(BASE_DIR, "docker/.env.dev")


if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)
    env = environ.Env(
        DEBUG=(bool, True),
        PLATFORM_HOST=(str, "localhost"),
    )
    environ.Env.read_env()
    DEBUG = env("DEBUG")
    SECRET_KEY = env("SECRET_KEY")
    DB_NAME = env("DB_NAME")
    DB_HOST = env("DB_HOST")
    DB_PORT = env("DB_PORT")
    DB_USER = env("DB_USER")
    DB_PASSWORD = env("DB_PASSWORD")
    REDIS_HOST = env("REDIS_HOST")
    REDIS_PORT = env("REDIS_PORT")
    PLATFORM_HOST = env("PLATFORM_HOST")
else:
    DEBUG = os.environ.get("DEBUG")
    SECRET_KEY = os.environ.get("SECRET_KEY")
    DB_NAME = os.environ.get("DB_NAME") or os.environ.get("POSTGRES_DB")
    DB_USER = os.environ.get("DB_USER") or os.environ.get("POSTGRES_USER")
    DB_PASSWORD = os.environ.get("DB_PASSWORD") or os.environ.get("POSTGRES_PASSWORD")
    DB_HOST = os.environ.get("DB_HOST") or "localhost"
    DB_PORT = os.environ.get("DB_PORT") or "5432"
    REDIS_HOST = os.environ.get("REDIS_HOST") or "localhost"
    REDIS_PORT = os.environ.get("REDIS_PORT") or "6379"
    PLATFORM_HOST = os.environ.get("PLATFORM_HOST")

ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

if PLATFORM_HOST:
    [ALLOWED_HOSTS.append(host.strip()) for host in PLATFORM_HOST.split(",")]

ALLOWED_HOSTS.append("127.0.0.1")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_summernote",
    "contentmanagement",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "../contentmanagement/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "root": {
#         "handlers": ["console"],
#         "level": "DEBUG",
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["console"],
#             "level": "DEBUG",
#             "propagate": True,
#         },
#     },
# }


WSGI_APPLICATION = "core.wsgi.application"


# Database

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
